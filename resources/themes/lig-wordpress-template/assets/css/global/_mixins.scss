// media query
@mixin mq($mode:break, $type: max) {
  $width: bp($mode);
  @if $type == min {
    $width: $width + 1;
  }
  @media (#{$type}-width: #{$width}px) {
    @content;
  }
}

@mixin mq_min($mode:break) {
  $width: bp($mode);
  $width: $width + 1;
  @media (min-width: #{$width}px) {
    @content;
  }
}

@mixin mq_max($mode:break) {
  $width: bp($mode);
  @media (max-width: #{$width}px) {
    @content;
  }
}

@mixin mq_between($min-mode,$max-mode) {
  $min: map-get($break-point, $min-mode);
  $max: map-get($break-point, $max-mode);
  $min-width: $min + 1;
  $max-width: $max;
  @media (min-width: #{$min-width}px) and (max-width: #{$max-width}px) {
    @content;
  }
}

@mixin pc() {
  @include mq_min() {
    @content;
  }
}

@mixin sp() {
  @include mq_max() {
    @content;
  }
}

@mixin padding($pc, $sp) {
  $pc_rtn: '';
  @each $v in $pc {
    $pc_rtn: #{$pc_rtn} rem($v);
  }
  padding: $pc_rtn;

  $sp_rtn: '';
  @each $v in $sp {
    $sp_rtn: #{$sp_rtn} rem($v);
  }
  @include sp() {
    padding: $sp_rtn;
  }
}

@mixin margin($pc, $sp) {
  $pc_rtn: '';
  @each $v in $pc {
    $pc_rtn: #{$pc_rtn} rem($v);
  }
  padding: $pc_rtn;

  $sp_rtn: '';
  @each $v in $sp {
    $sp_rtn: #{$sp_rtn} rem($v);
  }
  @include sp() {
    padding: $sp_rtn;
  }
}

@mixin margin_bottom($margin-pc,$margin-sp) {
  margin-bottom: rem($margin-pc);
  @include sp(){
    margin-bottom: rem_sp($margin-sp);
  }
}

@mixin margin_top_bottom($margin-pc,$margin-sp) {
  @if (length($margin-pc) == 1) {
    $margin-pc: (nth($margin-pc, 1), nth($margin-pc, 1));
  }
  @if (length($margin-sp) == 1) {
    $margin-sp: (nth($margin-sp, 1), nth($margin-sp, 1));
  }
  margin-top: rem(nth($margin-pc,1));
  margin-bottom: rem(nth($margin-pc,2));
  @include sp(){
    margin-top: rem_sp(nth($margin-sp,1));
    margin-bottom: rem_sp(nth($margin-sp,2));
  }
}